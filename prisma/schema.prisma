generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DEVELOPER
  ADMIN
  CONSULTANT
  CANDIDATE
  CLIENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum EventType {
  PROFILE_CREATED
  PROFILE_MODIFIED
  APPLIED_TO_JOB
  STATUS_CHANGED
  EMAIL_SENT
}

model User {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  email                    String    @unique
  contactNumber            String
  password                 String
  role                     UserRole  @default(CANDIDATE)
  emailVerified            Boolean   @default(false)
  emailVerifiedDate        DateTime?
  verificationRequestCount Int       @default(0)
  verificationToken        String?
  passwordResetToken       String?
  hashedPassword           String

  // Relations to specialized profiles
  consultantProfile ConsultantProfile?
  clientProfile     ClientProfile?
  candidateProfile  CandidateProfile?

  // Relation fields for created and updated tags
  createdTags Tag[] @relation("TagCreatedBy")
  updatedTags Tag[] @relation("TagUpdatedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConsultantProfile {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  gender                 Gender
  emergencyContactNumber String
  permanentAddress       String
  currentAddress         String
  joiningDate            DateTime
  isActive               Boolean  @default(true)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  jobsPosted         Job[] // Relation to jobs posted by the consultant
  assignedCandidates JobApplicant[] // Relation to candidates assigned by the consultant

  // New Relations for assigned sectors and domains
  assignedSectors ConsultantAssignedSectors[]
  assignedDomains ConsultantAssignedDomains[]

  journeys CandidateJourney[] // Ensure the relation is properly defined on both sides

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CandidateProfile {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  gender                 Gender?
  emergencyContactNumber String?
  currentCtc             String?
  designation            String?
  currentCompany         String?
  currentJobLocation     String?
  totalWorkingExperience String?
  degree                 String?
  collegeName            String?
  graduationYear         String?
  previousCompanyName    String?
  resume                 String? // URL or file path to the resume
  candidateCode          String?
  skills                 String[]
  bulkUpload             Boolean? @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  jobs JobApplicant[] // Array of jobs the candidate has applied for with status

  sector   Sector? @relation("CandidateSector", fields: [sectorId], references: [id], onDelete: SetNull)
  sectorId String? @db.ObjectId

  domain   Domain? @relation("CandidateDomain", fields: [domainId], references: [id], onDelete: SetNull)
  domainId String? @db.ObjectId

  // New communication status fields
  mailSent         String?   @default("No") // To track if the email was sent
  mailSentDate     DateTime? // To store the date when the email was sent
  mailSubject      String? // To store the subject of the email sent
  mailTemplateName String? // To store the name of the email template used
  mailSender       String? // To store the name of the email Sender

  // Relation to the CandidateTag join model
  candidateTags CandidateTag[] // Many-to-many relation through the join model

  journeys CandidateJourney[] // Ensure the relation is properly defined on both sides

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClientProfile {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  emergencyContactNumber String
  gender                 Gender
  // sector                 String
  // domain                 String
  designation            String
  currentJobLocation     String
  functionalArea         String
  currentCtc             String
  dateOfJoining          DateTime
  clientCode             String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  company   Company? @relation(fields: [companyId], references: [id]) // Link to the Company model
  companyId String?  @db.ObjectId

  jobs Job[] // Relation to jobs associated with this client

  sector   Sector? @relation("ClientSector", fields: [sectorId], references: [id], onDelete: SetNull)
  sectorId String? @db.ObjectId

  domain   Domain? @relation("ClientDomain", fields: [domainId], references: [id], onDelete: SetNull)
  domainId String? @db.ObjectId

  // New communication status fields for the client
  mailSent         Boolean   @default(false) // To track if the email was sent
  mailSentDate     DateTime? // To store the date when the email was sent
  mailSubject      String? // To store the subject of the email sent
  mailTemplateName String? // To store the name of the email template used

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  companyName        String  @unique // Unique name for the company
  companyDescription String? // Optional description about the company
  companyLogo        String? // Optional description about the company

  jobs    Job[] // Relation to jobs offered by the company
  clients ClientProfile[] // Relation to clients associated with this company

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  jobTitle              String
  // jobSector             String
  // jobDomain             String
  jobDescription        String
  jobSalary             Float // Salary in LPA
  jobCode               String?
  skillsRequired        String[] // Array of skills
  jobLocation           String
  jobVacancies          Int
  jobVacanciesRemaining Int
  jobApplicants         JobApplicant[] // Array of job applicants
  postedBy              ConsultantProfile @relation(fields: [consultantId], references: [id], onDelete: Cascade)
  consultantId          String            @db.ObjectId

  jobCompany Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String  @db.ObjectId

  clientSpoc   ClientProfile? @relation(fields: [clientSpocId], references: [id], onDelete: Cascade)
  clientSpocId String?        @db.ObjectId // Field to link the Client Profile as SPOC for this job

  sector   Sector? @relation("jobSector", fields: [sectorId], references: [id], onDelete: SetNull)
  sectorId String? @db.ObjectId

  domain   Domain? @relation("jobDomain", fields: [domainId], references: [id], onDelete: SetNull)
  domainId String? @db.ObjectId

  journeys CandidateJourney[] // Ensure the relation is properly defined on both sides

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobApplicant {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  candidateProfile  CandidateProfile  @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId       String            @db.ObjectId
  job               Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId             String            @db.ObjectId
  status            String // Status of the application (e.g., "Applied", "Interviewed", "Selected", etc.)
  // New field to track who assigned the candidate
  assignedById      String            @db.ObjectId
  assignedByName    String? // Optionally store the creator's ID
  consultantProfile ConsultantProfile @relation(fields: [assignedById], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([candidateId, jobId]) // Ensure unique combination of candidate and tag
}

model EmailTemplate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique // Template name
  subject   String //Template Subject
  content   String // HTML content of the template
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String // Name of the tag (e.g., "Urgent", "Experienced", etc.)
  description   String? // Optional description of the tag
  createdById   String? @db.ObjectId // Store the creator's user ID
  createdByName String? // Optionally store the creator's ID
  updatedById   String? @db.ObjectId // Store the updater's user ID
  updatedByName String? // Optionally store the creator's ID

  // Relations to User for creation and updates
  createdByUser User? @relation("TagCreatedBy", fields: [createdById], references: [id])
  updatedByUser User? @relation("TagUpdatedBy", fields: [updatedById], references: [id])

  // Relation to the CandidateTag join model
  candidateTags CandidateTag[] // Many-to-many relation through the join model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Composite unique constraint to ensure each user can only create one tag with the same name
  @@unique([name, createdById]) // This ensures that a user can only create one tag with a specific name
}

model CandidateTag {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  candidateId String @db.ObjectId
  tagId       String @db.ObjectId

  // Set up the relations
  candidate CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  tag       Tag              @relation(fields: [tagId], references: [id], onDelete: Cascade)

  assignedBy String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([candidateId, tagId]) // Ensure unique combination of candidate and tag
}

model Sector {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  sectorName String   @unique
  domains    Domain[] // Relation to domains under this sector

  consultantAssignments ConsultantAssignedSectors[]
  candidateProfiles     CandidateProfile[]          @relation("CandidateSector")
  clientProfiles        ClientProfile[]             @relation("ClientSector")
  jobs                  Job[]                       @relation("jobSector")
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
}

model Domain {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String  @unique
  sector   Sector? @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  sectorId String? @db.ObjectId

  consultantAssignments ConsultantAssignedDomains[]
  // New relation to CandidateProfile
  candidateProfiles     CandidateProfile[]          @relation("CandidateDomain")
  // new relation to client profile
  clientProfiles        ClientProfile[]             @relation("ClientDomain")
  jobs                  Job[]                       @relation("jobDomain")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConsultantAssignedSectors {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  consultantId String            @db.ObjectId
  consultant   ConsultantProfile @relation(fields: [consultantId], references: [id], onDelete: Cascade)

  sectorId String @db.ObjectId
  sector   Sector @relation(fields: [sectorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([consultantId, sectorId]) // Composite key for uniqueness
}

model ConsultantAssignedDomains {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  consultantId String            @db.ObjectId
  consultant   ConsultantProfile @relation(fields: [consultantId], references: [id], onDelete: Cascade)

  domainId String @db.ObjectId
  domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([consultantId, domainId]) // Composite key for uniqueness
}

model CandidateJourney {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId // Unique history ID
  candidateId  String    @db.ObjectId
  jobId        String?   @db.ObjectId // Nullable if not job-related
  consultantId String?   @db.ObjectId // Nullable if not consultant-related
  eventType    EventType // "Profile Created", "Applied to Job", "Status Changed", "Email Sent"
  status       String? // Applicable for job-related events
  remarks      String? // Additional details (e.g., "Candidate shortlisted")
  createdAt    DateTime  @default(now()) // Event timestamp

  candidate  CandidateProfile   @relation(fields: [candidateId], references: [id])
  job        Job?               @relation(fields: [jobId], references: [id])
  consultant ConsultantProfile? @relation(fields: [consultantId], references: [id])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DEVELOPER
  ADMIN
  CONSULTANT
  CANDIDATE
  CLIENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

model User {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  email                    String    @unique
  contactNumber            String
  password                 String
  role                     UserRole  @default(CANDIDATE)
  emailVerified            Boolean   @default(false)
  emailVerifiedDate        DateTime?
  verificationRequestCount Int       @default(0)
  verificationToken        String?
  passwordResetToken       String?
  hashedPassword           String

  // Relations to specialized profiles
  consultantProfile ConsultantProfile?
  clientProfile     ClientProfile?
  candidateProfile  CandidateProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConsultantProfile {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  gender                 Gender
  emergencyContactNumber String
  permanentAddress       String
  currentAddress         String
  joiningDate            DateTime
  isActive               Boolean  @default(true)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CandidateProfile {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  gender                 Gender
  emergencyContactNumber String
  sector                 String
  domain                 String
  currentCtc             String
  designation            String
  currentCompany         String
  currentJobLocation     String
  totalWorkingExperience String
  degree                 String
  collegeName            String
  graduationYear         String
  previousCompanyName    String
  resume                 String // URL or file path to the resume
  candidateCode          String
  skills                 String[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClientProfile {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  gender                 Gender
  designation            String
  company                String
  currentJobLocation     String
  emergencyContactNumber String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

